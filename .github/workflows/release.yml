name: Build and Release

on:
    workflow_dispatch:
        inputs:
            version:
                description: "Release version (e.g., v0.1.0)"
                required: true
                type: string
            build_windows:
                description: "Build for Windows"
                required: true
                type: boolean
                default: true
            build_linux:
                description: "Build for Linux"
                required: true
                type: boolean
                default: true
            build_macos:
                description: "Build for macOS"
                required: true
                type: boolean
                default: true
            publish_release:
                description: "Publish to GitHub Release"
                required: true
                type: boolean
                default: false

jobs:
    build-windows:
        if: ${{ inputs.build_windows }}
        runs-on: windows-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: x86_64-pc-windows-msvc

            - name: Build release binary
              run: cargo build --release --target x86_64-pc-windows-msvc

            - name: Create archive
              run: |
                  $version = "${{ inputs.version }}"
                  $archive = "rvd-$version-x86_64-pc-windows-msvc.zip"
                  Compress-Archive -Path target/x86_64-pc-windows-msvc/release/rvd.exe -DestinationPath $archive

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: rvd-windows-x86_64
                  path: rvd-*.zip

    build-linux:
        if: ${{ inputs.build_linux }}
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: x86_64-unknown-linux-gnu

            - name: Build release binary
              run: cargo build --release --target x86_64-unknown-linux-gnu

            - name: Create archive
              run: |
                  cd target/x86_64-unknown-linux-gnu/release
                  tar czf ../../../rvd-${{ inputs.version }}-x86_64-unknown-linux-gnu.tar.gz rvd
                  cd ../../..

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: rvd-linux-x86_64
                  path: rvd-*.tar.gz

    build-macos:
        if: ${{ inputs.build_macos }}
        runs-on: macos-latest
        strategy:
            matrix:
                target:
                    - x86_64-apple-darwin
                    - aarch64-apple-darwin
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: Build release binary
              run: cargo build --release --target ${{ matrix.target }}

            - name: Create archive
              run: |
                  cd target/${{ matrix.target }}/release
                  tar czf ../../../rvd-${{ inputs.version }}-${{ matrix.target }}.tar.gz rvd
                  cd ../../..

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: rvd-macos-${{ matrix.target }}
                  path: rvd-*.tar.gz

    create-release:
        if: ${{ inputs.publish_release }}
        needs: [build-windows, build-linux, build-macos]
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Prepare release assets
              run: |
                  mkdir -p release-assets
                  find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec cp {} release-assets/ \;
                  ls -lh release-assets/

            - name: Generate checksums
              run: |
                  cd release-assets
                  sha256sum * > SHA256SUMS
                  cat SHA256SUMS

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ inputs.version }}
                  name: Release ${{ inputs.version }}
                  draft: false
                  prerelease: false
                  files: release-assets/*
                  body: |
                      ## RVD ${{ inputs.version }}

                      ### Downloads

                      Choose the appropriate binary for your platform:

                      **Windows:**
                      - `rvd-${{ inputs.version }}-x86_64-pc-windows-msvc.zip` - Windows 64-bit

                      **Linux:**
                      - `rvd-${{ inputs.version }}-x86_64-unknown-linux-gnu.tar.gz` - Linux x86_64

                      **macOS:**
                      - `rvd-${{ inputs.version }}-x86_64-apple-darwin.tar.gz` - macOS Intel
                      - `rvd-${{ inputs.version }}-aarch64-apple-darwin.tar.gz` - macOS Apple Silicon

                      ### Installation

                      1. Download the appropriate archive for your platform
                      2. Extract the archive
                      3. Move the `rvd` binary to a directory in your PATH

                      ### Verification

                      Verify the download using SHA256 checksums provided in `SHA256SUMS`.

                      ### What's Changed

                      See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
